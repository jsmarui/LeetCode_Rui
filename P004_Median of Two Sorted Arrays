// recite

//O(log(m + n)) solution
int find_kth(int A[], int m, int B[], int n, int k)
{
    if(m > n) return find_kth(B, n, A, m, k);
    if(m == 0) return B[k-1];
    if(k == 1) return min(A[0], B[0]);

    int ai = min(m, k / 2), bi = k - ai;
    if(A[ai-1] < B[bi-1])
        return find_kth(A + ai, m - ai, B, n, k - ai);
    else if(A[ai-1] > B[bi-1])
        return find_kth(A, m, B + bi, n - bi, k - bi);
    else return A[ai-1];
}

double findMedianSortedArrays(int A[], int m, int B[], int n)
{
    int total = m + n;
    if(total & 0x1)
        return find_kth(A, m, B, n, total / 2 + 1);
    else
        return (find_kth(A, m, B, n, total / 2)
                + find_kth(A, m, B, n, total / 2 + 1)) / 2.0f;
}
